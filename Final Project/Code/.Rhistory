log.r <- log.posterior.sigma2(sigma2.star,mu,alpha,beta,y) - log.posterior.sigma2(sigma2,mu,alpha,beta,y)
if (log(runif(1))< log.r) {
sigma2 <- sigma2.star
accept.sigma2 <- accept.sigma2+1
}
sigma2.mcmc<-c(sigma2.mcmc, sigma2)
}
par(mfrow=c(2,1))
plot(mu.mcmc,type='l')
plot(sigma2.mcmc,type='l')
a = 5
log.posterior.mu <- function(mu,sigma2,mu0,tau2,y)
sum(dgamma(y, shape = (mu^2)/(sigma2), rate = mu/(sigma2), log=TRUE)) + dnorm(mu,mu0, sqrt(tau2),log=TRUE)
log.posterior.sigma2 <- function(sigma2,mu,alpha,beta,y) {
if (sigma2<0) return(-Inf) else
return(sum(dgamma(y, shape = (mu^2)/(sigma2), rate = mu/(sigma2), log=TRUE)) + log(dinvgamma(sigma2,alpha,beta)))
}
y <- aqi #data
## prior hyperparameters
mu0 <- 70
tau2 <- (mu0^2)/a
alpha <- 0.1
beta <- 0.1
sigma2 <- var(aqi) # initial value for sigma2
mu<- mean(aqi) # initial value for mu
n.sim<-10000 ; mu.mcmc<-NULL ; sigma2.mcmc <- NULL; accept.mu <- 0;accept.sigma2 <- 0
delta1 <- 70 ; ## normal proposal var for mu
delta2 <- 80000 ## normal proposal var for sigma2
for ( ite in 1 : n.sim) {
mu.star<-rnorm(1, mu, sqrt(delta1))
log.r <- log.posterior.mu(mu.star,sigma2,mu0,tau2,y) - log.posterior.mu(mu,sigma2,mu0,tau2,y)
if (log(runif(1))< log.r) {
mu <- mu.star
accept.mu <- accept.mu+1
}
mu.mcmc<-c(mu.mcmc, mu)
sigma2.star<-rnorm(1, sigma2, sqrt(delta2) )
log.r <- log.posterior.sigma2(sigma2.star,mu,alpha,beta,y) - log.posterior.sigma2(sigma2,mu,alpha,beta,y)
if (log(runif(1))< log.r) {
sigma2 <- sigma2.star
accept.sigma2 <- accept.sigma2+1
}
sigma2.mcmc<-c(sigma2.mcmc, sigma2)
}
par(mfrow=c(2,1))
plot(mu.mcmc,type='l')
plot(sigma2.mcmc,type='l')
print(paste("Acceptance rate of mu =", accept.mu/n.sim))
print(paste("Acceptance rate of sigma2 =", accept.sigma2/n.sim))
print(paste("Mean of mu =" ,mean(mu.mcmc[1000:10000])))
print(paste("Mean of sigma2 =", mean(sigma2.mcmc[1000:10000])))
print(paste("Variance of mu =", var(mu.mcmc[1000:10000])))
print(paste("Variance of sigma2 =", var(sigma2.mcmc[1000:10000])))
a = 5
log.posterior.mu <- function(mu,sigma2,mu0,tau2,y)
sum(dgamma(y, shape = (mu^2)/(sigma2), rate = mu/(sigma2), log=TRUE)) + dnorm(mu,mu0, sqrt(tau2),log=TRUE)
log.posterior.sigma2 <- function(sigma2,mu,alpha,beta,y) {
if (sigma2<0) return(-Inf) else
return(sum(dgamma(y, shape = (mu^2)/(sigma2), rate = mu/(sigma2), log=TRUE)) + log(dinvgamma(sigma2,alpha,beta)))
}
y <- aqi #data
## prior hyperparameters
mu0 <- 70
tau2 <- (mu0^2)/a
alpha <- 0.1
beta <- 0.1
sigma2 <- var(aqi) # initial value for sigma2
mu<- mean(aqi) # initial value for mu
n.sim<-10000 ; mu.mcmc<-NULL ; sigma2.mcmc <- NULL; accept.mu <- 0;accept.sigma2 <- 0
delta1 <- 65 ; ## normal proposal var for mu
delta2 <- 800000 ## normal proposal var for sigma2
for ( ite in 1 : n.sim) {
mu.star<-rnorm(1, mu, sqrt(delta1))
log.r <- log.posterior.mu(mu.star,sigma2,mu0,tau2,y) - log.posterior.mu(mu,sigma2,mu0,tau2,y)
if (log(runif(1))< log.r) {
mu <- mu.star
accept.mu <- accept.mu+1
}
mu.mcmc<-c(mu.mcmc, mu)
sigma2.star<-rnorm(1, sigma2, sqrt(delta2) )
log.r <- log.posterior.sigma2(sigma2.star,mu,alpha,beta,y) - log.posterior.sigma2(sigma2,mu,alpha,beta,y)
if (log(runif(1))< log.r) {
sigma2 <- sigma2.star
accept.sigma2 <- accept.sigma2+1
}
sigma2.mcmc<-c(sigma2.mcmc, sigma2)
}
par(mfrow=c(2,1))
plot(mu.mcmc,type='l')
plot(sigma2.mcmc,type='l')
print(paste("Acceptance rate of mu =", accept.mu/n.sim))
print(paste("Acceptance rate of sigma2 =", accept.sigma2/n.sim))
print(paste("Mean of mu =" ,mean(mu.mcmc[1000:10000])))
print(paste("Mean of sigma2 =", mean(sigma2.mcmc[1000:10000])))
print(paste("Variance of mu =", var(mu.mcmc[1000:10000])))
print(paste("Variance of sigma2 =", var(sigma2.mcmc[1000:10000])))
a = 5
log.posterior.mu <- function(mu,sigma2,mu0,tau2,y)
sum(dgamma(y, shape = (mu^2)/(sigma2), rate = mu/(sigma2), log=TRUE)) + dnorm(mu,mu0, sqrt(tau2),log=TRUE)
log.posterior.sigma2 <- function(sigma2,mu,alpha,beta,y) {
if (sigma2<0) return(-Inf) else
return(sum(dgamma(y, shape = (mu^2)/(sigma2), rate = mu/(sigma2), log=TRUE)) + log(dinvgamma(sigma2,alpha,beta)))
}
y <- aqi #data
## prior hyperparameters
mu0 <- 70
tau2 <- (mu0^2)/a
alpha <- 0.1
beta <- 0.1
sigma2 <- var(aqi) # initial value for sigma2
mu<- mean(aqi) # initial value for mu
n.sim<-10000 ; mu.mcmc<-NULL ; sigma2.mcmc <- NULL; accept.mu <- 0;accept.sigma2 <- 0
delta1 <- 65 ; ## normal proposal var for mu
delta2 <- 80500 ## normal proposal var for sigma2
for ( ite in 1 : n.sim) {
mu.star<-rnorm(1, mu, sqrt(delta1))
log.r <- log.posterior.mu(mu.star,sigma2,mu0,tau2,y) - log.posterior.mu(mu,sigma2,mu0,tau2,y)
if (log(runif(1))< log.r) {
mu <- mu.star
accept.mu <- accept.mu+1
}
mu.mcmc<-c(mu.mcmc, mu)
sigma2.star<-rnorm(1, sigma2, sqrt(delta2) )
log.r <- log.posterior.sigma2(sigma2.star,mu,alpha,beta,y) - log.posterior.sigma2(sigma2,mu,alpha,beta,y)
if (log(runif(1))< log.r) {
sigma2 <- sigma2.star
accept.sigma2 <- accept.sigma2+1
}
sigma2.mcmc<-c(sigma2.mcmc, sigma2)
}
par(mfrow=c(2,1))
plot(mu.mcmc,type='l')
plot(sigma2.mcmc,type='l')
print(paste("Acceptance rate of mu =", accept.mu/n.sim))
print(paste("Acceptance rate of sigma2 =", accept.sigma2/n.sim))
print(paste("Mean of mu =" ,mean(mu.mcmc[1000:10000])))
print(paste("Mean of sigma2 =", mean(sigma2.mcmc[1000:10000])))
print(paste("Variance of mu =", var(mu.mcmc[1000:10000])))
print(paste("Variance of sigma2 =", var(sigma2.mcmc[1000:10000])))
a = 5
log.posterior.mu <- function(mu,sigma2,mu0,tau2,y)
sum(dgamma(y, shape = (mu^2)/(sigma2), rate = mu/(sigma2), log=TRUE)) + dnorm(mu,mu0, sqrt(tau2),log=TRUE)
log.posterior.sigma2 <- function(sigma2,mu,alpha,beta,y) {
if (sigma2<0) return(-Inf) else
return(sum(dgamma(y, shape = (mu^2)/(sigma2), rate = mu/(sigma2), log=TRUE)) + log(dinvgamma(sigma2,alpha,beta)))
}
y <- aqi #data
## prior hyperparameters
mu0 <- 70
tau2 <- (mu0^2)/a
alpha <- 0.1
beta <- 0.1
sigma2 <- var(aqi) # initial value for sigma2
mu<- mean(aqi) # initial value for mu
n.sim<-10000 ; mu.mcmc<-NULL ; sigma2.mcmc <- NULL; accept.mu <- 0;accept.sigma2 <- 0
delta1 <- 65 ; ## normal proposal var for mu
delta2 <- 700000 ## normal proposal var for sigma2
for ( ite in 1 : n.sim) {
mu.star<-rnorm(1, mu, sqrt(delta1))
log.r <- log.posterior.mu(mu.star,sigma2,mu0,tau2,y) - log.posterior.mu(mu,sigma2,mu0,tau2,y)
if (log(runif(1))< log.r) {
mu <- mu.star
accept.mu <- accept.mu+1
}
mu.mcmc<-c(mu.mcmc, mu)
sigma2.star<-rnorm(1, sigma2, sqrt(delta2) )
log.r <- log.posterior.sigma2(sigma2.star,mu,alpha,beta,y) - log.posterior.sigma2(sigma2,mu,alpha,beta,y)
if (log(runif(1))< log.r) {
sigma2 <- sigma2.star
accept.sigma2 <- accept.sigma2+1
}
sigma2.mcmc<-c(sigma2.mcmc, sigma2)
}
par(mfrow=c(2,1))
plot(mu.mcmc,type='l')
plot(sigma2.mcmc,type='l')
print(paste("Acceptance rate of mu =", accept.mu/n.sim))
print(paste("Acceptance rate of sigma2 =", accept.sigma2/n.sim))
print(paste("Mean of mu =" ,mean(mu.mcmc[1000:10000])))
print(paste("Mean of sigma2 =", mean(sigma2.mcmc[1000:10000])))
print(paste("Variance of mu =", var(mu.mcmc[1000:10000])))
print(paste("Variance of sigma2 =", var(sigma2.mcmc[1000:10000])))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(MCMCpack)
library(msm)
library(psych)
df1 = read.csv("C:/Users/ddinh4/Documents/Fall 2023/EXST 7151/Final Project/Data/data_date.csv")
unique_data <- df1 %>% distinct(Country, .keep_all = TRUE)
aqi_2 <- unique_data[,c("Status","AQI_Value")]
aqi <- aqi_2[,2]
aqi <-  aqi[aqi <= 500]
aqi_df <- data.frame(aqi)
sum.aqi = describe(aqi_df)
knitr::kable(sum.aqi)
hist_aqi <- ggplot(aqi_df, aes(x = aqi)) + geom_histogram(aes(y = ..count..),
breaks = seq(0, 550, by = 25), colour = "black",
fill = "pink") +
geom_density(aes(y = ..count.. * 25), color = "blue", linewidth = 1) +
scale_x_continuous(breaks = seq(0,
550, by = 50)) + theme_classic()
hist_aqi
a = 5
log.posterior.mu <- function(mu,sigma2,mu0,tau2,y)
sum(dgamma(y, shape = (mu^2)/(sigma2), rate = mu/(sigma2), log=TRUE)) + dnorm(mu,mu0, sqrt(tau2),log=TRUE)
log.posterior.sigma2 <- function(sigma2,mu,alpha,beta,y) {
if (sigma2<0) return(-Inf) else
return(sum(dgamma(y, shape = (mu^2)/(sigma2), rate = mu/(sigma2), log=TRUE)) + log(dinvgamma(sigma2,alpha,beta)))
}
y <- aqi #data
## prior hyperparameters
mu0 <- 70
tau2 <- (mu0^2)/a
alpha <- 0.1
beta <- 0.1
sigma2 <- var(aqi) # initial value for sigma2
mu<- mean(aqi) # initial value for mu
n.sim<-10000 ; mu.mcmc<-NULL ; sigma2.mcmc <- NULL; accept.mu <- 0;accept.sigma2 <- 0
delta1 <- 65 ; ## normal proposal var for mu
delta2 <- 700000 ## normal proposal var for sigma2
for ( ite in 1 : n.sim) {
mu.star<-rnorm(1, mu, sqrt(delta1))
log.r <- log.posterior.mu(mu.star,sigma2,mu0,tau2,y) - log.posterior.mu(mu,sigma2,mu0,tau2,y)
if (log(runif(1))< log.r) {
mu <- mu.star
accept.mu <- accept.mu+1
}
mu.mcmc<-c(mu.mcmc, mu)
sigma2.star<-rnorm(1, sigma2, sqrt(delta2) )
log.r <- log.posterior.sigma2(sigma2.star,mu,alpha,beta,y) - log.posterior.sigma2(sigma2,mu,alpha,beta,y)
if (log(runif(1))< log.r) {
sigma2 <- sigma2.star
accept.sigma2 <- accept.sigma2+1
}
sigma2.mcmc<-c(sigma2.mcmc, sigma2)
}
par(mfrow=c(2,1))
plot(mu.mcmc,type='l')
plot(sigma2.mcmc,type='l')
print(paste("Acceptance rate of mu =", accept.mu/n.sim))
print(paste("Acceptance rate of sigma2 =", accept.sigma2/n.sim))
print(paste("Mean of mu =" ,mean(mu.mcmc[1000:10000])))
print(paste("Mean of sigma2 =", mean(sigma2.mcmc[1000:10000])))
print(paste("Variance of mu =", var(mu.mcmc[1000:10000])))
print(paste("Variance of sigma2 =", var(sigma2.mcmc[1000:10000])))
log.posterior.mu <- function(mu,sigma2,mu0,tau2,y)
sum(dnorm(y, mu, sqrt(sigma2), log=TRUE)) + dnorm(mu,mu0, sqrt(tau2),log=TRUE)
log.posterior.sigma2 <- function(sigma2,mu,alpha,beta,y) {
if (sigma2<0) return(-Inf) else
return(sum(dnorm(y, mu, sqrt(sigma2), log=TRUE)) + log(dinvgamma(sigma2,alpha,beta)))
}
y <- aqi #data
## prior hyperparameters
mu0 <- 70
tau2 <- (70^2)/5
alpha <- 0.1
beta <- 0.1
sigma2 <- var(aqi) # initial value for sigma2
mu<- mean(aqi) # initial value for mu
n.sim<-10000 ; mu.mcmc<-NULL ; sigma2.mcmc <- NULL; accept.mu <- 0;accept.sigma2 <- 0
delta1 <- 150 ; ## normal proposal var for mu
delta2 <- 505000 ## normal proposal var for sigma2
for ( ite in 1 : n.sim) {
mu.star<-rnorm(1, mu, sqrt(delta1))
log.r <- log.posterior.mu(mu.star,sigma2,mu0,tau2,y) - log.posterior.mu(mu,sigma2,mu0,tau2,y)
if (log(runif(1))< log.r) {
mu <- mu.star
accept.mu <- accept.mu+1
}
mu.mcmc<-c(mu.mcmc, mu)
sigma2.star<-rnorm(1, sigma2, sqrt(delta2) )
log.r <- log.posterior.sigma2(sigma2.star,mu,alpha,beta,y) - log.posterior.sigma2(sigma2,mu,alpha,beta,y)
if (log(runif(1))< log.r) {
sigma2 <- sigma2.star
accept.sigma2 <- accept.sigma2+1
}
sigma2.mcmc<-c(sigma2.mcmc, sigma2)
}
par(mfrow=c(2,1))
plot(mu.mcmc,type='l')
plot(sigma2.mcmc,type='l')
print(paste("Acceptance rate of mu =", accept.mu/n.sim))
print(paste("Acceptance rate of sigma2 =", accept.sigma2/n.sim))
print(paste("Mean of mu =" ,mean(mu.mcmc[2000:10000])))
print(paste("Mean of sigma2 =", mean(sigma2.mcmc[2000:10000])))
print(paste("Variance of mu =", var(mu.mcmc[2000:10000])))
print(paste("Variance of sigma2 =", var(sigma2.mcmc[2000:10000])))
a=5
log.posterior.mu <- function(mu,sigma2,mu0,tau2,y)
sum(dnorm(y, mu, sqrt(sigma2), log=TRUE)) + dgamma(mu,a, a/mu0,log=TRUE)
log.posterior.sigma2 <- function(sigma2,mu,alpha,beta,y) {
if (sigma2<0) return(-Inf) else
return(sum(dnorm(y, mu, sqrt(sigma2), log=TRUE)) + log(dinvgamma(sigma2,alpha,beta)))
}
y <- aqi #data
## prior hyperparameters
mu0 <- 70
tau2 <- (70^2)/5
alpha <- 0.1
beta <- 0.1
sigma2 <- var(aqi) # initial value for sigma2
mu<- mean(aqi) # initial value for mu
n.sim<-10000 ; mu.mcmc<-NULL ; sigma2.mcmc <- NULL; accept.mu <- 0;accept.sigma2 <- 0
delta1 <- 130 ; ## normal proposal var for mu
delta2 <- 600000 ## normal proposal var for sigma2
for ( ite in 1 : n.sim) {
mu.star<-rnorm(1, mu, sqrt(delta1))
log.r <- log.posterior.mu(mu.star,sigma2,mu0,tau2,y) - log.posterior.mu(mu,sigma2,mu0,tau2,y)
if (log(runif(1))< log.r) {
mu <- mu.star
accept.mu <- accept.mu+1
}
mu.mcmc<-c(mu.mcmc, mu)
sigma2.star<-rnorm(1, sigma2, sqrt(delta2) )
log.r <- log.posterior.sigma2(sigma2.star,mu,alpha,beta,y) - log.posterior.sigma2(sigma2,mu,alpha,beta,y)
if (log(runif(1))< log.r) {
sigma2 <- sigma2.star
accept.sigma2 <- accept.sigma2+1
}
sigma2.mcmc<-c(sigma2.mcmc, sigma2)
}
par(mfrow=c(2,1))
plot(mu.mcmc,type='l')
plot(sigma2.mcmc,type='l')
print(paste("Acceptance rate of mu =", accept.mu/n.sim))
print(paste("Acceptance rate of sigma2 =", accept.sigma2/n.sim))
print(paste("Mean of mu =" ,mean(mu.mcmc[2000:10000])))
print(paste("Mean of sigma2 =", mean(sigma2.mcmc[2000:10000])))
print(paste("Variance of mu =", var(mu.mcmc[2000:10000])))
print(paste("Variance of sigma2 =", var(sigma2.mcmc[2000:10000])))
a=5
log.posterior.mu <- function(mu,sigma2,mu0,tau2,y)
sum(dnorm(y, mu, sqrt(sigma2), log=TRUE)) + dgamma(mu,a, a/mu0,log=TRUE)
log.posterior.sigma2 <- function(sigma2,mu,alpha,beta,y) {
if (sigma2<0) return(-Inf) else
return(sum(dnorm(y, mu, sqrt(sigma2), log=TRUE)) + log(dgamma(sigma2,alpha,beta)))
}
y <- aqi #data
## prior hyperparameters
mu0 <- 70
tau2 <- (70^2)/5
alpha <- 0.1
beta <- 0.1
sigma2 <- var(aqi) # initial value for sigma2
mu<- mean(aqi) # initial value for mu
n.sim<-10000 ; mu.mcmc<-NULL ; sigma2.mcmc <- NULL; accept.mu <- 0;accept.sigma2 <- 0
delta1 <- 60 ; ## normal proposal var for mu
delta2 <- 30000 ## normal proposal var for sigma2
for ( ite in 1 : n.sim) {
mu.star<-rnorm(1, mu, sqrt(delta1))
log.r <- log.posterior.mu(mu.star,sigma2,mu0,tau2,y) - log.posterior.mu(mu,sigma2,mu0,tau2,y)
if (log(runif(1))< log.r) {
mu <- mu.star
accept.mu <- accept.mu+1
}
mu.mcmc<-c(mu.mcmc, mu)
sigma2.star<-rnorm(1, sigma2, sqrt(delta2) )
log.r <- log.posterior.sigma2(sigma2.star,mu,alpha,beta,y) - log.posterior.sigma2(sigma2,mu,alpha,beta,y)
if (log(runif(1))< log.r) {
sigma2 <- sigma2.star
accept.sigma2 <- accept.sigma2+1
}
sigma2.mcmc<-c(sigma2.mcmc, sigma2)
}
par(mfrow=c(2,1))
plot(mu.mcmc,type='l')
plot(sigma2.mcmc,type='l')
print(paste("Acceptance rate of mu =", accept.mu/n.sim))
print(paste("Acceptance rate of sigma2 =", accept.sigma2/n.sim))
print(paste("Mean of mu =" ,mean(mu.mcmc[2000:10000])))
print(paste("Mean of sigma2 =", mean(sigma2.mcmc[2000:10000])))
print(paste("Variance of mu =", var(mu.mcmc[2000:10000])))
print(paste("Variance of sigma2 =", var(sigma2.mcmc[2000:10000])))
a=5
log.posterior.mu <- function(mu,sigma2,mu0,tau2,y)
sum(dnorm(y, mu, sqrt(sigma2), log=TRUE)) + dgamma(mu,a, a/mu0,log=TRUE)
log.posterior.sigma2 <- function(sigma2,mu,alpha,beta,y) {
if (sigma2<0) return(-Inf) else
return(sum(dnorm(y, mu, sqrt(sigma2), log=TRUE)) + log(dgamma(sigma2,alpha,beta)))
}
y <- aqi #data
## prior hyperparameters
mu0 <- 70
tau2 <- (70^2)/5
alpha <- 0.1
beta <- 0.1
sigma2 <- var(aqi) # initial value for sigma2
mu<- mean(aqi) # initial value for mu
n.sim<-10000 ; mu.mcmc<-NULL ; sigma2.mcmc <- NULL; accept.mu <- 0;accept.sigma2 <- 0
delta1 <- 60 ; ## normal proposal var for mu
delta2 <- 30000 ## normal proposal var for sigma2
for ( ite in 1 : n.sim) {
mu.star<-rtnorm(1, mu, sqrt(delta1), 0, 500)
log.r <- log.posterior.mu(mu.star,sigma2,mu0,tau2,y) + dtnorm(mu, mu.star, sqrt(delta1), 0,500, log = T) - log.posterior.mu(mu,sigma2,mu0,tau2,y) - dtnorm(mu.star, mu, sqrt(delta1), 0,500, log = T)
if (log(runif(1))< log.r) {
mu <- mu.star
accept.mu <- accept.mu+1
}
mu.mcmc<-c(mu.mcmc, mu)
sigma2.star<-rtnorm(1, sigma2, sqrt(delta2),0, Inf)
log.r <- log.posterior.sigma2(sigma2.star,mu,alpha,beta,y) + dtnorm(sigma2,sigma2.star,sqrt(delta2),0,Inf,log=T) - log.posterior.sigma2(sigma2,mu,alpha,beta,y) - dtnorm(sigma2.star,sigma2,sqrt(delta2),0,Inf,log=T)
if (log(runif(1))< log.r) {
sigma2 <- sigma2.star
accept.sigma2 <- accept.sigma2+1
}
sigma2.mcmc<-c(sigma2.mcmc, sigma2)
}
par(mfrow=c(2,1))
plot(mu.mcmc,type='l')
plot(sigma2.mcmc,type='l')
print(paste("Acceptance rate of mu =", accept.mu/n.sim))
print(paste("Acceptance rate of sigma2 =", accept.sigma2/n.sim))
print(paste("Mean of mu =" ,mean(mu.mcmc[2000:10000])))
print(paste("Mean of sigma2 =", mean(sigma2.mcmc[2000:10000])))
print(paste("Variance of mu =", var(mu.mcmc[2000:10000])))
print(paste("Variance of sigma2 =", var(sigma2.mcmc[2000:10000])))
prior.prob.h0 = pgamma(100, a, a/mu0)
prior.prob.h1 = 1 - prior.prob.h0
prior.odds = prior.prob.h0/prior.prob.h1
p = function(y){
# Replace this with your actual pdf function
# For example, a normal distribution with mean 0 and standard deviation 1:
return(dnorm(y, mean = 175.79, sd = 0.93))
}
# Define the range over which you want to calculate the cdf
lower_limit <- -Inf  # replace with your lower limit
upper_limit <- 175     # replace with your upper limit
# Use integrate to calculate the cdf
cdf_result <- integrate(p, lower_limit, upper_limit)$value
cdf_result/(1-cdf_result)
cdf = pnorm(175, mean = 175.79, sd = 0.93)
print(paste("Comparing the CDF using pnorm and integrating:", cdf,cdf_result))
mu0 = 70
tau2 = (mu0^2)/5
mu = mean(mu.mcmc[2000:10000])
sigma2 = var(sigma2.mcmc[2000:10000])
mu_mcmc=mu.mcmc[2000:10000]
po.h0=sum(mu_mcmc > 60)/length(mu_mcmc)
po.h1 = 1-po.h0
po.odds = po.h0/po.h1
range(mu_mcmc)
BF = post.odds/prior.odds
BF = po.odds/prior.odds
mu0 = 70
tau2 = (mu0^2)/5
mu = mean(mu.mcmc[2000:10000])
sigma2 = var(sigma2.mcmc[2000:10000])
mu_mcmc=mu.mcmc[2000:10000]
po.h0=sum(mu_mcmc < 60)/length(mu_mcmc)
po.h1 = 1-po.h0
po.odds = po.h0/po.h1
range(mu_mcmc)
BF = po.odds/prior.odds
1/BF
mu0 = 70
tau2 = (mu0^2)/5
mu = mean(mu.mcmc[2000:10000])
sigma2 = var(sigma2.mcmc[2000:10000])
mu_mcmc=mu.mcmc[2000:10000]
po.h0=sum(mu_mcmc < 60)/length(mu_mcmc)
po.h1 = 1-po.h0
po.odds = po.h0/po.h1
range(mu_mcmc)
a = 5
log.posterior.mu <- function(mu,sigma2,mu0,tau2,y)
sum(dgamma(y, shape = (mu^2)/(sigma2), rate = mu/(sigma2), log=TRUE)) + dnorm(mu,mu0, sqrt(tau2),log=TRUE)
log.posterior.sigma2 <- function(sigma2,mu,alpha,beta,y) {
if (sigma2<0) return(-Inf) else
return(sum(dgamma(y, shape = (mu^2)/(sigma2), rate = mu/(sigma2), log=TRUE)) + log(dinvgamma(sigma2,alpha,beta)))
}
y <- aqi #data
## prior hyperparameters
mu0 <- 70
tau2 <- (mu0^2)/a
alpha <- 0.1
beta <- 0.1
sigma2 <- var(aqi) # initial value for sigma2
mu<- mean(aqi) # initial value for mu
n.sim<-10000 ; mu.mcmc<-NULL ; sigma2.mcmc <- NULL; accept.mu <- 0;accept.sigma2 <- 0
delta1 <- 65 ; ## normal proposal var for mu
delta2 <- 700000 ## normal proposal var for sigma2
for ( ite in 1 : n.sim) {
mu.star<-rnorm(1, mu, sqrt(delta1))
log.r <- log.posterior.mu(mu.star,sigma2,mu0,tau2,y) - log.posterior.mu(mu,sigma2,mu0,tau2,y)
if (log(runif(1))< log.r) {
mu <- mu.star
accept.mu <- accept.mu+1
}
mu.mcmc<-c(mu.mcmc, mu)
sigma2.star<-rnorm(1, sigma2, sqrt(delta2) )
log.r <- log.posterior.sigma2(sigma2.star,mu,alpha,beta,y) - log.posterior.sigma2(sigma2,mu,alpha,beta,y)
if (log(runif(1))< log.r) {
sigma2 <- sigma2.star
accept.sigma2 <- accept.sigma2+1
}
sigma2.mcmc<-c(sigma2.mcmc, sigma2)
}
par(mfrow=c(2,1))
plot(mu.mcmc,type='l')
plot(sigma2.mcmc,type='l')
mu0 = 70
tau2 = (mu0^2)/5
mu = mean(mu.mcmc[2000:10000])
sigma2 = var(sigma2.mcmc[2000:10000])
mu_mcmc=mu.mcmc[2000:10000]
po.h0=sum(mu_mcmc < 60)/length(mu_mcmc)
po.h1 = 1-po.h0
po.odds = po.h0/po.h1
range(mu_mcmc)
BF = po.odds/prior.odds
1/BF
